{"version":3,"sources":["assets/Octocat.png","Store.js","api/github-api.js","Search/Search.tsx","Info/OrgsCard/OrgsCard.tsx","Info/ReposCard/ReposCard.tsx","Info/UserCard/UserCard.tsx","Info/Info.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/black_swan_logo.png"],"names":["module","exports","reducer","state","action","type","userRepos","payload","userData","Context","React","createContext","BASE_URL","getRepos","username","url","axios","get","then","response","data","getUserData","all","user","orgs","App","dispatch","useContext","useState","isLoading","setIsLoading","setUsername","isButtonDisabled","setIsButtonDisabled","searchComplete","setSearchComplete","a","Modal","error","title","content","useEffect","length","className","to","src","bsdLogo","alt","size","placeholder","value","onChange","e","target","prefix","style","color","suffix","ghLogo","disabled","loading","onClick","searchGitHub","OrgsCard","map","org","href","key","id","avatar_url","login","ReposCard","repos","repo","clone_url","name","UserCard","company","email","followers","following","Info","store","navigateToSearch","setNavigateToSearch","shape","icon","useReducer","Provider","exact","path","component","Search","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02c9fcd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Octocat.0ba2aa20.png\";","import React from \"react\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"resetState\":\n      return {};\n    case \"setUserRepos\":\n      return {\n        ...state,\n        userRepos: action.payload\n      };\n\n    case \"setUserData\":\n      return {\n        ...state,\n        userData: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const Context = React.createContext();\n","import axios from \"axios\";\n\n// Documentation is at https://developer.github.com/v3/\nconst BASE_URL = \"https://api.github.com\";\n\nfunction getRepos(username) {\n  const url = `${BASE_URL}/users/${username}/repos?per_page=250`;\n\n  return axios.get(url).then(response => response.data);\n}\n\nfunction getUserData(username) {\n  return axios\n    .all([\n      axios.get(`${BASE_URL}/users/${username}`),\n      axios.get(`${BASE_URL}/users/${username}/orgs`)\n    ])\n    .then(([user, orgs]) => ({\n      user: user.data,\n      orgs: orgs.data\n    }));\n}\n\nexport { getRepos, getUserData };\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Input, Tooltip, Icon, Button, Modal } from \"antd\";\nimport { Context } from \"../Store\";\nimport { getRepos, getUserData } from \"../api/github-api\";\nimport bsdLogo from \"../assets/black_swan_logo.png\";\nimport ghLogo from \"../assets/Octocat.png\";\nimport \"./Search.css\";\n\nconst App: React.FC = (): JSX.Element => {\n  const { dispatch } = useContext(Context);\n  const [isLoading, setIsLoading] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [searchComplete, setSearchComplete] = useState(false);\n\n  useEffect((): void => {\n    if (username.length) {\n      setIsButtonDisabled(false);\n    } else {\n      setIsButtonDisabled(true);\n    }\n  }, [username]);\n\n  async function searchGitHub(): Promise<any> {\n    setIsLoading(true);\n    try {\n      const userRepos = await getRepos(username);\n      const userData = await getUserData(username);\n      dispatch({ type: \"setUserRepos\", payload: userRepos });\n      dispatch({ type: \"setUserData\", payload: userData });\n      setSearchComplete(true);\n    } catch (error) {\n      Modal.error({\n        title: \"Sorry but...\",\n        content:\n          \"...an error occurred while processing your request. Did you type the right username?\"\n      });\n      setIsLoading(false);\n      setUsername(\"\");\n    }\n  }\n\n  return (\n    <section className=\"mainPage\">\n      {searchComplete && <Redirect to=\"/info\" />}\n      <img\n        src={bsdLogo}\n        alt=\"Black Swan Data logo\"\n        className=\"searchPageLogo\"\n      />\n      <Input\n        size=\"large\"\n        className=\"searchPageInput\"\n        placeholder=\"Enter GitHub username\"\n        value={username}\n        onChange={(e): void => setUsername(e.target.value)}\n        prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n        suffix={\n          <Tooltip title=\"Please enter a username to see user's repos and organizations\">\n            <Icon type=\"info-circle\" style={{ color: \"rgba(0,0,0,.45)\" }} />\n          </Tooltip>\n        }\n      />\n      <img\n        src={ghLogo}\n        alt=\"GitHub logo\"\n        className={`ghLogo ${isButtonDisabled && \"greyScale\"}`}\n      />\n      <Button\n        className=\"customButton\"\n        type=\"primary\"\n        size=\"large\"\n        disabled={isButtonDisabled}\n        loading={isLoading}\n        onClick={(): Promise<any> => searchGitHub()}\n      >\n        Search GitHub for me\n      </Button>\n    </section>\n  );\n};\n\nexport default App;\n","import React from \"react\";\n\ntype Org = {\n  id: number;\n  login: string;\n  url: string;\n  avatar_url: string;\n};\n\ntype Props = {\n  orgs: Org[];\n};\n\nconst OrgsCard = ({ orgs }: Props): JSX.Element => {\n  return (\n    <div className=\"card\">\n      <h2>User Organizations: {orgs.length}</h2>\n      <div className=\"cardContent\">\n        {orgs.map(\n          (org: Org): JSX.Element => {\n            return (\n              <a href={org.url} key={org.id}>\n                <img\n                  alt={`${org.id} Organization Avatar`}\n                  src={org.avatar_url}\n                  className=\"orgAvatar\"\n                />\n                {org.login}\n              </a>\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OrgsCard;\n","import React from \"react\";\n\ntype Repo = {\n  id: number;\n  clone_url: string;\n  name: string;\n};\n\ntype Props = {\n  repos: Repo[];\n};\n\nconst ReposCard = ({ repos }: Props): JSX.Element => {\n  return (\n    <div className=\"card\">\n      <h2>User Repositories: {repos.length}</h2>\n      <div className=\"cardContent\">\n        {repos.map(\n          (repo: Repo): JSX.Element => {\n            return (\n              <a href={repo.clone_url} key={repo.id}>\n                {repo.name}\n              </a>\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ReposCard;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from \"react\";\n\ntype Props = {\n  name: string;\n  company: string;\n  email: string;\n  followers: number;\n  following: number;\n  avatar_url: string;\n};\n\nconst UserCard = ({\n  name,\n  company,\n  email,\n  followers,\n  following,\n  avatar_url\n}: Props): JSX.Element => {\n  return (\n    <div className=\"card\">\n      <h2>User Info:</h2>\n      <img src={avatar_url} alt=\"User Avatar\" className=\"userAvatar\" />\n      <h3>User name: {name || \"not set\"}</h3>\n      <h3>Company: {company || \"not set\"}</h3>\n      <h3>Email: {email || \"not set\"}</h3>\n      <h3>Followers: {followers}</h3>\n      <h3>Following: {following}</h3>\n    </div>\n  );\n};\n\nexport default UserCard;\n","import React, { useState, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Button } from \"antd\";\nimport { Context } from \"../Store\";\nimport OrgsCard from \"./OrgsCard/OrgsCard\";\nimport ReposCard from \"./ReposCard/ReposCard\";\nimport UserCard from \"./UserCard/UserCard\";\nimport \"./Info.css\";\nimport bsdLogo from \"../assets/black_swan_logo.png\";\n\nconst Info = (): JSX.Element => {\n  const { store, dispatch } = useContext(Context);\n  const { userRepos, userData } = store;\n  const [navigateToSearch, setNavigateToSearch] = useState(false);\n\n  const handleBackButtonClick = (): void => {\n    dispatch({ type: \"resetState\" });\n    setNavigateToSearch(true);\n  };\n\n  return (\n    <div>\n      {navigateToSearch && <Redirect to=\"/\" />}\n      <nav>\n        <Button\n          className=\"customButton\"\n          type=\"primary\"\n          size=\"large\"\n          shape=\"round\"\n          icon=\"left-circle\"\n          onClick={(): void => handleBackButtonClick()}\n        >\n          BACK\n        </Button>\n        <img\n          src={bsdLogo}\n          alt=\"Black Swan Data logo\"\n          className=\"infoPageLogo\"\n        />\n        <div />\n      </nav>\n      <main>\n        {userData && userData.user && <UserCard {...userData.user} />}\n        {userRepos && <ReposCard repos={userRepos} />}\n        {userData && userData.orgs && <OrgsCard orgs={userData.orgs} />}\n      </main>\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useReducer } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Context, reducer } from \"./Store\";\nimport Search from \"./Search/Search\";\nimport Info from \"./Info/Info\";\n\nconst App = (): JSX.Element => {\n  const initialState = {};\n\n  const [store, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <Context.Provider value={{ store, dispatch }}>\n      <div>\n        <Route exact path=\"/\" component={Search} />\n        <Route exact path=\"/info\" component={Info} />\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/black_swan_logo.21233f26.png\";"],"sourceRoot":""}